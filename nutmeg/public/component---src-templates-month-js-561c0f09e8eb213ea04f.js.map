{"version":3,"sources":["webpack:///./src/components/card.js","webpack:///./src/components/article-preview.js","webpack:///./src/components/styles/hero.module.css","webpack:///./src/templates/month.js"],"names":["Card","title","name","month","category","display","imagePath","require","console","log","to","style","textDecoration","class","src","alt","alignContent","href","ArticlePreview","article","year","slug","description","module","exports","MonthTemplate","render","siteTitle","get","this","props","posts","filter","post","node","currentURL","location","split","pop","foundPost","map","className","key","React","Component"],"mappings":"4FAAA,qCA0CeA,IAvCH,SAAC,GAAsC,IAApCC,EAAmC,EAAnCA,MAAOC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAE7BC,EAAUJ,EAEVE,GACFE,EAAUH,EACVE,EAAW,QAGXA,EAAW,UAGb,IAAIE,EAAYC,UAAQ,KAAaH,EAAd,QAGvB,OADAI,QAAQC,IAAIH,GAEV,kBAAC,IAAD,CAAMI,GAAE,GAAKT,EAASU,MAAO,CACzBC,eAAgB,SAEhB,yBAAKC,MAAM,QACP,yBACIC,IAAMR,EACNO,MAAM,eACNE,IAAI,QAER,yBAAKF,MAAM,aACP,wBAAIA,MAAM,aAAaF,MAAO,CAC1BK,aAAc,WACdX,GACJ,uBAAGQ,MAAM,cAGT,uBAAGI,KAAK,KAAKJ,MAAM,mBAAnB,e,kCCnChB,yDAiCeK,IA1BO,SAAC,GAAwC,IAAtCC,EAAqC,EAArCA,QAASC,EAA4B,EAA5BA,KAAMjB,EAAsB,EAAtBA,MAAsB,EAAfC,SAC7CI,QAAQC,IAAIU,GACZ,IAAIb,EAAYC,UAAQ,KAAaY,EAAQf,SAAtB,QAEvB,OACE,kBAAC,IAAD,CAAMM,GAAE,aAAeU,EAAf,IAAuBjB,EAAvB,IAAgCgB,EAAQE,MAC5C,yBAAKR,MAAM,QACP,yBACIC,IAAMR,EACNO,MAAM,eACNE,IAAI,QAER,yBAAKF,MAAM,aACP,wBAAIA,MAAM,aAAaF,MAAO,CAC1BK,aAAc,WACdG,EAAQlB,OACZ,uBAAGY,MAAM,aACRM,EAAQG,YAAYA,aAErB,uBAAGL,KAAK,KAAKJ,MAAM,mBAAnB,e,qBCzBhBU,EAAOC,QAAU,CAAC,KAAO,2BAA2B,UAAY,gCAAgC,YAAc,kCAAkC,aAAe,mCAAmC,UAAY,kC,+JCUxMC,G,4GACJC,OAAA,WACE,IAAMC,EAAYC,IAAIC,KAAKC,MAAO,gCAE5BC,EADWH,IAAIC,KAAM,0CACJG,QAAO,SAAAC,GAAI,OAAIA,EAAKC,KAAKjC,SAG5CkC,EAAaN,KAAKC,MAAMM,SAASnB,KAG/Bd,GAFNgC,EAAaA,EAAWE,MAAM,MAELC,MACnBlB,EAAOe,EAAWG,MAExBH,EAAa,IAAMf,EAAO,IAAMjB,EAIhC,IAAIoC,GAAY,EAQhB,OANAR,EAAMS,KAAI,YAAe,IAAZN,EAAW,EAAXA,KACLA,EAAKd,MAAQA,GAAQc,EAAK/B,OAASA,IACnCoC,GAAY,MAIdA,EAWF,kBAAC,IAAD,CAAQH,SAAUP,KAAKC,MAAMM,SAAUnC,MAAO0B,GACtC,wBAAIc,UAAU,gBACbV,EAAMS,KAAI,YAAe,IAAZN,EAAW,EAAXA,KACV,GAAIA,EAAKd,MAAQA,GAAQc,EAAK/B,OAASA,EAEnC,OADAoC,GAAY,EAER,wBAAIG,IAAKR,EAAKb,MACd,kBAAC,IAAD,CAAgBF,QAASe,EAAMd,KAAMA,EAAMjB,MAAOA,UAhBlE,kBAAC,IAAD,CAAQiC,SAAUP,KAAKC,MAAMM,SAAUnC,MAAO0B,GAC1C,4C,GA5BYgB,IAAMC,YAuDnBnB","file":"component---src-templates-month-js-561c0f09e8eb213ea04f.js","sourcesContent":["import React from 'react';\nimport { Link } from 'gatsby'\n\nconst Card= ({ title, name, month, category }) => {\n  \n  let display = title\n  \n  if (month) {\n    display = name\n    category = \"Math\"\n  }\n  else {\n    category = \"Science\"\n  }\n\n  let imagePath = require(`../images/${category}.svg`)\n  //let imagePath = require(\"../images/health.svg\")\n  console.log(imagePath)\n  return (\n    <Link to={`${title}`} style={{\n        textDecoration: \"none\",\n    }}>\n        <div class=\"card\">\n            <img\n                src= {imagePath}\n                class=\"card-img-top\"\n                alt=\"...\"\n            />\n            <div class=\"card-body\">\n                <h4 class=\"card-title\" style={{\n                    alignContent: \"center\",\n                }}>{display}</h4>\n                <p class=\"card-text\">\n                \n                </p>\n                <a href=\"#!\" class=\"btn btn-primary\">Button</a>\n            </div>\n        </div>\n    </Link>\n    )\n}\n\nexport default Card;","import React from 'react'\nimport { Link } from 'gatsby'\nimport Img from 'gatsby-image'\n\nimport styles from './styles/article-preview.module.css'\n\n\nconst ArticlePreview= ({ article, year, month, category }) => {\n  console.log(article)\n  let imagePath = require(`../images/${article.category}.svg`)\n\n  return (\n    <Link to={`/archives/${year}/${month}/${article.slug}`}>\n        <div class=\"card\">\n            <img\n                src= {imagePath}\n                class=\"card-img-top\"\n                alt=\"...\"\n            />\n            <div class=\"card-body\">\n                <h4 class=\"card-title\" style={{\n                    alignContent: \"center\",\n                }}>{article.title}</h4>\n                <p class=\"card-text\">\n                {article.description.description}\n                </p>\n                <a href=\"#!\" class=\"btn btn-primary\">Button</a>\n            </div>\n        </div>\n    </Link>\n    )\n  }\n\nexport default ArticlePreview;\n    {/*}  \n    return (\n      <div className={styles.preview}>\n        <img\n          src={imagePath}\n          class=\"card-img-top\"\n          alt=\"...\"\n        />  \n        <h3 className={styles.previewTitle}>\n          <Link to={`/archives/${year}/${month}/${article.slug}`}>{article.title}</Link>\n        </h3>\n        <small>{`${month}/${article.day}/${year}`}</small>\n        <p\n          dangerouslySetInnerHTML={{\n            __html: article.description.childMarkdownRemark.html,\n          }}\n        />\n      </div> \n        ) */}\n  \n\n\n\n/*\nexport default ({ article, year, month, category }) => (\n  imagePath = require(`../images/${category}.svg`\n\n    return (\n    <div className={styles.preview}>\n      <img\n        src={require(`../images/${category}.svg`)}\n        class=\"card-img-top\"\n        alt=\"...\"\n      />  \n      <h3 className={styles.previewTitle}>\n        <Link to={`/archives/${year}/${month}/${article.slug}`}>{article.title}</Link>\n      </h3>\n      <small>{`${month}/${article.day}/${year}`}</small>\n      <p\n        dangerouslySetInnerHTML={{\n          __html: article.description.childMarkdownRemark.html,\n        }}\n      />\n    </div> \n  )\n)\n*/\n\n\n\n//       <Img alt=\"\" fluid={article.heroImage.fluid} />\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"hero\":\"hero-module--hero--1u2ZB\",\"heroImage\":\"hero-module--heroImage--15qjR\",\"heroDetails\":\"hero-module--heroDetails--oQ0Hz\",\"heroHeadline\":\"hero-module--heroHeadline--24FEQ\",\"heroTitle\":\"hero-module--heroTitle--3ygoX\"};","import React from 'react'\nimport { graphql } from 'gatsby'\nimport { Helmet } from 'react-helmet'\nimport get from 'lodash/get'\nimport Img from 'gatsby-image'\nimport Layout from '../components/layout'\nimport Card from '../components/card'\nimport ArticlePreview from '../components/article-preview'\n\nimport heroStyles from '../components/styles/hero.module.css'\n\nclass MonthTemplate extends React.Component {\n  render() {\n    const siteTitle = get(this.props, 'data.site.siteMetadata.title')\n    const allPosts = get(this, 'props.data.allContentfulBlogPost.edges')\n    const posts = allPosts.filter(post => post.node.title)\n    //const posts = get(this, 'props.data.allContentfulBlogPost.edges')\n\n    let currentURL = this.props.location.href\n    currentURL = currentURL.split('/')\n    \n    const month = currentURL.pop()\n    const year = currentURL.pop()\n    \n    currentURL = \"/\" + year + \"/\" + month\n    \n    // need to know: year and month --> display relevant blog posts\n    \n    let foundPost = false;\n    \n    posts.map(({ node }) => {\n        if (node.year == year && node.month == month) {\n            foundPost = true;\n        }})\n\n    // No posts found for given month and year\n    if (! foundPost) {\n        return (\n            <Layout location={this.props.location} title={siteTitle}>\n                <h1> NO POSTS </h1> \n            </Layout>\n        )\n    }\n    \n    // Display blog posts found for given month and year\n    else {\n        return (\n        <Layout location={this.props.location} title={siteTitle}>\n                <ul className=\"article-list\">\n                {posts.map(({ node }) => {\n                    if (node.year == year && node.month == month) {\n                        foundPost = true;\n                        return (\n                            <li key={node.slug}>\n                            <ArticlePreview article={node} year={year} month={month} />\n                            </li>\n                        )}\n                    })\n                }\n                </ul>\n        </Layout>\n        )\n    }\n  }\n}\n\nexport default MonthTemplate\n\n\n// filter query based on year and month\nexport const pageQuery = graphql`\n  query DayQuery($month: Int, $year: Int) {\n    \n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allContentfulBlogPost(filter: {month: {eq: $month}, year: {eq: $year}}, sort: { fields: [publishDate], order: ASC }) {\n      edges {\n        node {\n          title\n          category\n          slug\n          year\n          month\n          day\n          publishDate(formatString: \"YYYY\")\n          tags\n          heroImage {\n            fluid(maxWidth: 350, maxHeight: 196, resizingBehavior: SCALE) {\n              ...GatsbyContentfulFluid\n            }\n          }\n          description {\n            description\n            childMarkdownRemark {\n              html\n            }\n          }\n        }\n      }\n    }\n  }\n`"],"sourceRoot":""}